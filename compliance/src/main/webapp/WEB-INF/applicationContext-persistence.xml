<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		 http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"
		>
			
	<context:annotation-config />
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	 
	<!-- JPA configs -->
	<bean class="org.springframework.orm.jpa.JpaTransactionManager"
          id="transactionManager">
        <property name="entityManagerFactory"
                  ref="entityManagerFactory" />
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property>
    </bean>
    
 	<bean id="sessionFactory"
	    class="org.springframework.orm.jpa.vendor.HibernateJpaSessionFactoryBean">
	    <property name="entityManagerFactory" ref="entityManagerFactory"/>
	    <property name="persistenceUnitName" value="${persistence.unit.name}"/>
	</bean>
	
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com.bob.compliance.model"/>
        <property name="persistenceXmlLocation" value="classpath:persistence.xml"/>
        <property name="persistenceUnitName" value="${persistence.unit.name}"></property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect"/>
                <property name="database" value="MYSQL"/>
            </bean>
        </property>
        <property name="jpaProperties">
	        <value>
                <!-- hibernate.cache.use_second_level_cache = true
                hibernate.cache.region.factory_class = org.hibernate.cache.ehcache.EhCacheRegionFactory
                hibernate.cache.use_query_cache = true-->
                hibernate.generate_statistics = true
            </value>
        </property>
    </bean> 
   
   <!-- <bean id="entityManagerFactoryStage"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSourceStage" />
        <property name="packagesToScan" value="com.odr.core.domain"/>
        <property name="persistenceXmlLocation" value="classpath:persistence_stage.xml"/>
        <property name="persistenceUnitName" value="gg_core_persistence_unit_stage"></property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="${showSql}"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect"/>
                <property name="database" value="MYSQL"/>
            </bean>
        </property>
        <property name="jpaProperties">
            <value>
                hibernate.cache.use_second_level_cache = true
                hibernate.cache.region.factory_class = org.hibernate.cache.ehcache.EhCacheRegionFactory
                hibernate.cache.use_query_cache = true
                hibernate.generate_statistics = true
            </value> 
        </property>
    </bean>
    
    
    <bean id="dataSourceStage" class="com.mchange.v2.c3p0.ComboPooledDataSource"
				destroy-method="close"
				p:driverClass="${JDBC_DRIVER_CLASS_STAGE}"
				p:jdbcUrl="${JDBC_URL_STAGE}"
				p:user="${JDBC_USER_NAME_STAGE}"
				p:password="${JDBC_USER_PASS_STAGE}"
				p:acquireIncrement="2"
				p:idleConnectionTestPeriod="300"
				p:testConnectionOnCheckout="true"
				p:preferredTestQuery="select 1"
				p:checkoutTimeout="1000000"
				p:maxIdleTimeExcessConnections="240"
				p:maxPoolSize="100"
				p:maxStatements="0"
				p:minPoolSize="30" /> -->	
 	
    <!-- Custom Data Source to switch between different DBs based on appId (Point of Deployment)  -->
    <bean id="dataSource" class="com.odr.core.webservice.filter.ModriaDataSourceRouter">
		<property name="targetDataSources">
			<null></null>
		</property>
	</bean>  
	
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
				destroy-method="close"
				p:driverClass="${JDBC_DRIVER_CLASS}"
				p:jdbcUrl="${JDBC_URL}"
				p:user="${JDBC_USER_NAME}"
				p:password="${JDBC_USER_PASS}"
				p:acquireIncrement="2"
				p:idleConnectionTestPeriod="300"
				p:testConnectionOnCheckout="true"
				p:preferredTestQuery="select 1"
				p:checkoutTimeout="1000000"
				p:maxIdleTimeExcessConnections="240"
				p:maxPoolSize="100"
				p:maxStatements="0"
				p:minPoolSize="30" />	
	 	 -->
	<!-- Spring Data JPA configuration -->
  	<jpa:repositories base-package="com.odr.core.jpa.repository" 
                        entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager"/>
    <!-- <jpa:repositories base-package="com.odr.core.jpa.repository.stage"
                      entity-manager-factory-ref="entityManagerFactoryStage" transaction-manager-ref="transactionManagerStage"/> -->
    
    <!-- Application wide manager  -->
    <bean class="com.odr.core.common.ApplicationManager"></bean>
    <bean class="com.odr.core.customfield.CustomFieldCacheManager"/>
    <bean class="com.odr.core.script.ScriptRunnerFactory"/>
    <bean class="com.odr.core.useraction.UserActionExecutorFactory" scope="prototype"/>
    
    	<!-- MP1516974 adding jasypt and mail bean.START -->
	<!-- <bean id="encryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor"> 
		<property name="algorithm"> <value>PBEWithMD5AndDES</value> </property> <property 
		name="password"> <value>modria</value> </property> </bean> -->
	<bean id="encryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="algorithm">
			<value>PBEWithMD5AndDES</value>
		</property>
		<property name="password">
			<value>modria</value>
		</property>
		<property name="stringOutputType">
			<value>hexadecimal</value>

		</property>
	</bean>

	<bean id="hibernateStringEncryptor"
		class="org.jasypt.hibernate4.encryptor.HibernatePBEStringEncryptor">
		<property name="encryptor" ref="encryptor" />
		<property name="registeredName" value="hibernateStringEncryptor" />
	</bean>



	<bean id="mailSenderProxy" class="org.springframework.mail.javamail.JavaMailSenderImpl" >
		<property name="port" value="587" />
		
		<property name="javaMailProperties">
			<props>
            	<prop key="mail.smtp.auth">true</prop>
            	<prop key="mail.smtp.starttls.enable">true</prop>
        	</props>
		</property>
	</bean>
	<bean id="mailSenderAdvice" class="com.odr.core.common.ChangeMailServerAspect">
	
	</bean>
	<bean id="mailSenderAdvisor" 
                 class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut" ref="mailSenderPointcut" />
		<property name="advice" ref="mailSenderAdvice" />
	</bean>
	<bean id="mailSenderPointcut" 
                class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="send" />
	</bean>
	<bean id="defaultMailDetails" 
                class="com.odr.core.model.DefaultMailServerBean">
	</bean>
	<bean id="mailSender" 
                class="org.springframework.aop.framework.ProxyFactoryBean" >
 
		<property name="target" ref="mailSenderProxy" />
 
		<property name="interceptorNames">
			<list>
				<value>mailSenderAdvice</value>
			</list>
		</property>
	</bean>
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<map>
				<entry key="runtime.log.logsystem.class" value="org.apache.velocity.runtime.log.NullLogChute"/>
				<entry key="resource.loader" value="class"/>
				<entry key="class.resource.loader.class" value="org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"/>
				<entry key="esc"><bean class="org.apache.velocity.tools.generic.EscapeTool"/></entry>
			</map>
		</property>
	</bean>
		
    <bean id="quartzJDBCScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="schedulerName" value="gg_scheduler"></property>
        <property name="autoStartup" value="${SCHEDULER_ENABLE}"></property>        
        <property name="quartzProperties">
            <map>
            	<!-- Thread  -->
                <entry key="org.quartz.threadPool.class" value="org.quartz.simpl.SimpleThreadPool" />
                <entry key="org.quartz.threadPool.threadCount" value="10" />
                <entry key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread" value="true" />
                
                <!-- setting JobStore Props  -->
                <entry key="org.quartz.jobStore.class" value="org.quartz.impl.jdbcjobstore.JobStoreTX"/>
                <entry key="org.quartz.jobStore.driverDelegateClass" value="org.quartz.impl.jdbcjobstore.MSSQLDelegate"/>
                <!-- <entry key="org.quartz.jobStore.useProperties" value="true"/> -->
                <entry key="org.quartz.jobStore.dataSource" value="myDS"/>
                <entry key="org.quartz.jobListener.NAME.class" value="com.odr.core.webservice.filter.ModriaQuartzJobListener"/>
                
                 <!-- setting cluster properties -->
                <entry key="org.quartz.jobStore.isClustered" value="true"/>
                <entry key="org.quartz.jobStore.selectWithLockSQL" value="SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE"/> 
                                
                <entry key="org.quartz.dataSource.myDS.driver" value="${JDBC_DRIVER_CLASS}"/>
                <entry key="org.quartz.dataSource.myDS.URL" value="${JDBC_URL}"/>
                <entry key="org.quartz.dataSource.myDS.user" value="${JDBC_USER_NAME}"/>
                <entry key="org.quartz.dataSource.myDS.password" value="${JDBC_USER_PASS}"/>
                <entry key="org.quartz.dataSource.myDS.validationQuery"  value="select 1"/>
                <entry key="org.quartz.dataSource.myDS.maxConnections" value="5"/>
            </map>
        </property>
    </bean>
    
    <bean id="quartzInStoreScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="schedulerName" value="gg_instore_scheduler"></property>
        <property name="autoStartup" value="${SCHEDULER_ENABLE}"></property>
        <property name="quartzProperties">
            <map>
                <entry key="org.quartz.threadPool.class" value="org.quartz.simpl.SimpleThreadPool" />
                <entry key="org.quartz.threadPool.threadCount" value="10" />
                <entry key="org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread" value="true" />
            </map>
        </property>
    </bean>
    
    <!-- Register the messages.properties -->  
    <bean id="messageSource"  
          class="org.springframework.context.support.ResourceBundleMessageSource">  
        <property name="basenames">
        	<list>
        		<value>messages</value>
        	</list>
        </property>  
    </bean>  
    <bean id="FtpUtility" class="com.odr.core.util.FtpUtility">
    </bean>
    <bean id="sFtpUtility" class="com.odr.core.util.SFtpUtil">
    </bean>
 <bean id="RegTokenBean" class="com.odr.core.domain.RegistrationProperty">
   <property name="from" value="${from}"/>
   <property name="expiraryHour" value="${expiraryHour}"/>
   <property name="templatName" value="${templatName}"/>
  </bean>    
  <bean id="reCaptcha" class="net.tanesha.recaptcha.ReCaptchaImpl">
                <property name="privateKey" value="${privateKey}" />
                <property name="publicKey" value="${publicKey}" />
                <property name="includeNoscript" value="false" />
        </bean>
    <bean id="idGenerator" class="com.odr.core.util.IdGeneratorImpl"/>
	<bean id="jsonProvider" class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
	<bean id="multiTenantRestWebServiceInInterceptor" class="com.odr.core.webservice.filter.MultiTenantRestWebServiceInInterceptor" >
	</bean>
	<bean id="multiTenantRestWebServiceOutInterceptor" class="com.odr.core.webservice.filter.MultiTenantRestWebServiceOutInterceptor" >
	</bean>
	<bean id="exceptionMapper" class="com.odr.core.webservice.provider.InterceptorExceptionMapper"/>
	
	<bean id="action" class="com.odr.core.webservices.UserActionWebServiceImpl"/> 
	<jaxrs:server id="UserAction" address="/UserAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/UserAction">
		<jaxrs:serviceBeans>
			<ref bean="action"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="loginService" class="com.odr.core.webservices.LoginWebServiceImpl" />
	<jaxrs:server id="LoginAction" address="/LoginAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/LoginAction">
		<jaxrs:serviceBeans>
			<ref bean="loginService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="caseDetailsService" class="com.odr.core.webservices.CaseDetailsWebserviceImpl"/>
	<jaxrs:server id="DisputeDetailsAction" address="/DisputeDetailsAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/DisputeDetailsAction">
		<jaxrs:serviceBeans>
			<ref bean="caseDetailsService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="contactSearchService" class="com.odr.core.webservices.ContactSearchWebServiceImpl"/>
	<jaxrs:server id="ContactAction" address="/ContactAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/ContactAction">
		<jaxrs:serviceBeans>
			<ref bean="contactSearchService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="disputeActionWebService" class="com.odr.core.webservices.DisputeActionWebServiceImpl"/>
	 
	<jaxrs:server id="DisputeAction" address="/DisputeAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/DisputeAction">
		<jaxrs:serviceBeans>
			<ref bean="disputeActionWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>

	<bean id="documentSearchService" class="com.odr.core.webservices.DocumentSearchWebServiceImpl"/>
	 
	<jaxrs:server id="/DocumentAction" address="/DocumentAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/DocumentAction">
		<jaxrs:serviceBeans>
			<ref bean="documentSearchService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="reportWebService" class="com.odr.core.webservices.ReportWebServiceImpl"/>
	
	<jaxrs:server id="/ReportAction" address="/ReportAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/ReportAction">
		<jaxrs:serviceBeans>
			<ref bean="reportWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="exportImportWebService" class="com.odr.core.webservices.ExportImportWebServiceImpl"/>
	
	<jaxrs:server id="/ExportImportAction" address="/ExportImportAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/ExportImportAction">
		<jaxrs:serviceBeans>
			<ref bean="exportImportWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>

	<bean id="userInterfaceWebService" class="com.odr.core.webservices.UserInterfaceWebServiceImpl"/>
	
	<jaxrs:server id="/UIAction" address="/UIAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/UIAction">
		<jaxrs:serviceBeans>
			<ref bean="userInterfaceWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<bean id="policyWebService" class="com.odr.core.webservices.PolicyWebServiceImpl"/>
	
	<jaxrs:server id="/PolicyAction" address="/PolicyAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/PolicyAction">
		<jaxrs:serviceBeans>
			<ref bean="policyWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
	<!-- <bean id="ruleEngineDelegate" class="com.odr.core.ruleengine.delegate.RuleEngineDelegate"/> -->
	<bean id="ruleEngineWebService" class="com.odr.core.webservices.RuleEngineWebserviceImpl"/>
	 
	<jaxrs:server id="/RulesEngineAction" address="/RulesEngineAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/RulesEngineAction">
		<jaxrs:serviceBeans>
			<ref bean="ruleEngineWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>

	<bean id="utilWebService" class="com.odr.core.webservices.UtilWebServiceImpl"/>
	
	<jaxrs:server staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}">
		<jaxrs:serviceBeans>
			<ref bean="utilWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
	</jaxrs:server>
	
	<bean id="logEntryWebService" class="com.odr.core.webservices.LogEntryWebserviceImpl"/>
	 
	<jaxrs:server id="/LogEntryAction" address="/LogEntryAction" staticSubresourceResolution="true" publishedEndpointUrl="${endpointUrl}/LogEntryAction">
		<jaxrs:serviceBeans>
			<ref bean="logEntryWebService"></ref>
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jsonProvider"></ref>
			<ref bean="exceptionMapper"></ref>
		</jaxrs:providers>
		<jaxrs:inInterceptors>
			 <ref bean="multiTenantRestWebServiceInInterceptor"/>
		</jaxrs:inInterceptors>
		<jaxrs:outInterceptors>
			 <ref bean="multiTenantRestWebServiceOutInterceptor"/>
		</jaxrs:outInterceptors>
	</jaxrs:server>
	
</beans>